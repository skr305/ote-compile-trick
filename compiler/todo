1. 完成defineVar和if的语法糖 //
2. 完成库函数返回套件的完整定义 并加以测试
先2后1

3. 完成定义变量时的变量名检测

//小tip 在g模式下使用match似乎会出错的样子
4. 在编译过程中 错误出现时 应该直接抛出错误

5. 把一些常用的正则表达式给提取出来


// 

1. 把赋值操作和carry执行流程进行改进
carry 需要把完整的信息传入 Lib 中
(完整的类型交互体系 两种存在形式 未编译 编译后)

2. 可以考虑像add devide这些操作直接使用eval进行运算

3. 上下文注入器



/// 
@2. 包管理的话需要作一个函数原型 export 导出当前的上下文环境
然后还有就是指定导出原型 输出指定的变量

这些可以 以对象方式导出吗

比如说这样

export(a, b, c) : object
或者说

一旦指定了对象 其实主要的就是对其键值的指定
然后就是制定它的语法糖 嘛 语法糖倒是不难想
{} <- 像这样的 我的类型系统还是太死板了 不能快速的制定出一个新的类型

那么接下来的任务也很简单了 
首先:
1. 制定对象类型 实施类型注入 即 提供方便的API以供新类型的定义
2. 上下文引入方式1 C和C++类型的方式 即批量引入定义的上下文


让我们看看制定一个类型需要些什么吧 首先是它的
1. 语法糖 (即编译链那边 注入对应的类型检查)
2. 类型校验 (增加对类型的判定)
3. 类型转化

4. 还要优化调用编译时的问题
像类似log(b, add(a,b)) 这样的情况就会等不到参数编译就产生错误

对象的话也是如此 {"a"}
对象决定是搞成本身